<?php

// $Id$

/**
 * Implementation of hook_menu().
 */
function imis_auth_menu() {
  $items = array();

  $items['admin/user/imis_auth'] = array(
    'title'             => 'iMIS Member authentication',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imis_auth_settings'),
    'access arguments' => array('administer iMIS authentication settings'),
    'description'       => 'Manage settings for the iMIS authentication module including authentication URL and optional extra permission checks',
  );

  return $items;
}

function imis_auth_vars() {
  return array(
    'is_member'        => '<IsMember>',
    'customer_type'    => '<CustomerTypeCode>',
    'contact_status'   => '<ContactStatusCode>',
    'billing_category' => '<BillingCategory>',
  );
}

/**
 * Settings for the module
 *
 * @ingroup form
 */
function imis_auth_settings() {
  $form['settings'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('iMIS member site host'),
    '#description'   => t('iMIS member site host name, service and method to authenticate against.'),
  );

  $form['settings']['imis_auth_host'] =  array(
    '#type'          => 'textfield',
    '#title'         => t('Host'),
    '#default_value' => variable_get('imis_auth_host', ''),
    '#description'   => t('The host name to authenticate against. You must include the url scheme <em>e.g. http://</em>. Do not include a trailing <em>/</em>'),
    '#required' => TRUE,
  );

  $form['settings']['imis_auth_ws_filename'] =  array(
    '#type'          => 'textfield',
    '#title'         => t('Webservice filename'),
    '#default_value' => variable_get('imis_auth_ws_filename', ''),
    '#description'   => t('The webservice filename to authenticate against.'),
    '#required' => TRUE,
  );

  $form['settings']['imis_auth_ws_method'] =  array(
    '#type'          => 'textfield',
    '#title'         => t('Webservice method'),
    '#default_value' => variable_get('imis_auth_ws_method', ''),
    '#description'   => t('The webservice method to authenticate against.'),
    '#required' => TRUE,
  );

  $form['imis_auth_disable_forgot_password'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Disable "request new password" links on login forms'),
    '#default_value' => variable_get('imis_auth_disable_forgot_password', 1),
    '#description'   => t('Selecting this option disables the "request new password" links on login forms. These links normally take users
                           to the Drupal reset password pages. Passwords are managed by the remote iMIS authentication server. Resetting
                           the Drupal password does NOT reset the iMIS user password.  Disabling these links is recommended.  Users that are
                           exempt from iMIS authentication can still reset their password on their profile pages, or have an administrator reset
                           the password for them')
  );

  $form['imis_auth_message'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Login notice'),
    '#default_value' => variable_get('imis_auth_message', ''),
    '#description'   => t('You can include a note that will apear below the login form and the login block to notify users that they can authenticate using iMIS credentials.'),
  );

  $form['imis_auth_exempt'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Exempt users'),
    '#default_value' => variable_get('imis_auth_exempt', ''),
    '#description'   => t('List of Drupal User IDs on this site to exempt from iMIS authentication.
                           Enter one user ID per line. These users will login using their Drupal credentials,
                           and can have roles in addition to "authenticated user".  The user ID of a user can be
                           determined by visiting !link and clicking on the "edit" link for each user.  The user ID will
                           then be visible in the URL in the format /user/##/edit where ## is the user ID.', array('!link' => l(t('admin/user/user'), 'admin/user/user'))),
  );

  $form['imis_auth_exmpt_list'] = array(
    '#prefix' => t('Currently exempt users'),
    '#value' => imis_auth_exempt_list(imis_auth_textarea_to_array('imis_auth_exempt')),
  );

  $form['vars'] = array(
    '#type'          => 'fieldset',
    '#collapsible'   => TRUE,
    '#collapsed'     => TRUE,
    '#title'         => t('Additional user authentication checks'),
    '#description'   => t('You may wish to check certain user values before granting access to the site.
                           Select the addition checks you want to make and provide a list of valid values
                           that a user must have before they can be granted access to your site.'),
  );

  foreach (imis_auth_vars() as $key => $var) {
    $form['vars']['imis_auth_var_' . $key] =  array(
      '#type'          => 'checkbox',
      '#title'         => t('Check @var', array('@var' => $var)),
      '#default_value' => variable_get('imis_auth_var_' . $key, 0),
    );

    $form['vars']['imis_auth_val_' . $key] =  array(
      '#type'          => 'textarea',
      '#title'         => t('Valid values'),
      '#default_value' => variable_get('imis_auth_val_' . $key, ''),
      '#description'   => t('One value per line.')
    );
  }

  $form = system_settings_form($form);

  $form['#validate'][] = 'imis_auth_admin_form_validate';
  $form['#submit'][] = 'imis_auth_admin_form_submit';

  return $form;
}

function imis_auth_exempt_list($list) {
  $header = array(t('User ID'), t('User Name'), t('Email Address'));
  foreach($list as $uid) {
    $user = user_load(array('uid' => $uid));
    $name = l($user->name, 'user/'. $user->uid);
    $email = l($user->mail, 'mailto:'. $user->mail);
    $rows[] = array($user->uid, $name, $email);
  }
  $output = theme('table', $header, $rows);// go through the list and mark it up in a table or something for display.
  return $output;
}

/**
 * Provide some validation of the module settings form
 */
function imis_auth_admin_form_validate($form, &$form_state) {

  $host = $form_state['values']['imis_auth_host'];
  $parsedurl = parse_url($host);
  $scheme = $parsedurl['scheme'];
  if (!$scheme){
    form_set_error('imis_auth_host', t('Missing url scheme. Include http:// or https:// as part of the url'));
  }
  if (($scheme != 'http') && ($scheme != 'https')){
    form_set_error('imis_auth_host', t('Invalid url scheme. Must be one of http or https'));
  }

}

function imis_auth_admin_form_submit($form) {
  //since there is an option to alter a menu (by disabling a local menu task)
  //we need to rebuilt the menu if that setting is changed
  if ($form['imis_auth_disable_forgot_password']['#value'] != $form['imis_auth_disable_forgot_password']['#default_value']) {
    menu_rebuild();
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Change the normal form login form behavior.
 *
 */
function imis_auth_form_alter(&$form, &$form_state, $form_id) {

  // Replace the drupal authenticate function is it's used as validation.
  if (isset($form['#validate']) && is_array($form['#validate']) && ($key = array_search('user_login_authenticate_validate', $form['#validate'])))
    $form['#validate'][$key] = 'imis_auth_login_validate';

  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Login form extra info
      $msg = variable_get('imis_auth_message', '');
      if ($msg) {
        $form['member-auth'] = array(
          '#value'  => filter_xss_admin($msg),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#weight' => -10,
        );
      }
      $disable_links = variable_get('imis_auth_disable_forgot_password', 0);
      if ($disable_links) {
        $form['links'] = NULL;
      }
      break;

  }
}

/**
 * List of values from a textarea
 */
function imis_auth_textarea_to_array($var_name) {
  $list = array();

  // Get the list of values from textarea
  $list = explode("\n", variable_get($var_name, ''));

  // remove new lines and other stuff from the values
  $sanitized_list = array();

  foreach ($list as $key => $value) {
    $sanitized_list[$key] = trim($value);
  }
  // Return list
  return $sanitized_list;
}

/**
 * Validate the user based on another Drupal site
 */
function imis_auth_login_validate($form, &$form_state) {
  // Get the name and password fields from the form
  $name = $form_state['values']['name'];
  // The password as entered by the user
  $pass = $form_state['values']['pass'];

  // Check if the account already exists or its a new user
  $account = user_load(array('name' => $name));
  if (isset($account->uid)) {
    // Find out if the user is in the list of exempt users
    $list = imis_auth_textarea_to_array('imis_auth_exempt');
      // Check if uid 1 is in the list
    if (!in_array(1, $list)) {
      //if not add it to the list to ensure site admin uses normal authentication
      $list[] = 1;
    }
    foreach ($list as $key => $uid) {
      if ($uid == $account->uid) {
        // This is the site admin or another user on the list,
        // we just do normal authentication and return (skipping external authentication)
        user_authenticate(array('name' => $name, 'pass' => $pass));
        return;
      }
    }
  }

  // Attempt remote authentication
  $ret = imis_auth_webservice($name, $pass);
  if (!$ret['result']) {
    // User does not have a valid name/pass in the imis_members table
    // @TODO sort through the error messages we're willing to display and those we aren't
    // e.g. if error number is negative its a local configuration error say the module is incorrectly configured and tell admin to check the log
    form_set_error('name', $ret['message']);
    return;
  }
  else {
    // Check the additional fields
    foreach (imis_auth_vars() as $key => $var) {
      $check = variable_get('imis_auth_var_' . $key, 0);
      if ($check) {
        $list = imis_auth_textarea_to_array('imis_auth_val_' . $key);
        if (!imis_auth_check_values($ret[$key], $list)) {
          $err_msg  = 'Your login has been accepted but our records show that your membership is not up to date. ';
          $err_msg .= 'Please contact us for assistance.';
          form_set_error('name', $err_msg);
          return;
        }
      }
    }

    // Remote login is valid
    $uid = db_result(db_query("SELECT uid FROM {imis_members} WHERE member_id = %d", $ret['id']));
    //if the remote uid exists in our database do a check to see if it matches the user we loaded earlier
    if ($uid != 0 && $uid == $account->uid) {
      // appears to be a valid existing user
      // do additional user system checks before fully granting access.

      //for some reason if the login form is submitted from a block calling
      //user_external_login will work to do the additional validation of the user
      //however, if the form is submitted from /user/login
      //user_external_login will go into an infinite loop as it re-loads the login form
      //As a work around - we do the same checks from that function here.

      // Check if user is blocked or denied by access rules.
      user_login_name_validate($form, $state, (array)$account);
      if (form_get_errors()) {
        // Invalid login.
        return;
      }
      // Valid login.
      global $user;
      $user = $account;

      //provide some feedback for the user
        drupal_set_message(t('Welcome %username', array('%username' => $account->name)));
      
      user_authenticate_finalize($state['values']);
      return;
    }
    else {
      // Create a new local user.  We do not call user_external_login_register()
      // because it assumes the "regular" way of Drupal user registration,
      // i.e. generate a random password, ...etc. We don't want that workflow.
      imis_auth_user_save($name, $pass, $ret['id']);
      return;
    }
  }
}

function imis_auth_check_values($key, $values = array()) {
  foreach ($values as $k => $value) {
    if ($key == $value) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Save the user data to the Drupal user's table
 */
function imis_auth_user_save($name, $pass, $member_id) {
  global $user;

  // Create a user array from the data
  $module = 'imis_auth';
  $userinfo = array(
    'name'             => $name,
    'pass'             => md5($pass),
    'init'             => $name,
    'status'           => 1,
    'access'           => time(),
    "authname_$module" => $name,
  );
  // Save it to the user table
  $account = user_save('', $userinfo);

  // Save the remote user id
  db_query("DELETE FROM {imis_members} WHERE member_id = %d", $member_id);
  db_query("INSERT INTO {imis_members} (member_id, uid) VALUES (%d, %d)", $member_id, $account->uid);

  // Set the global variable
  $user = $account;

  // Log this information
  watchdog('user', 'New member: %name via %module.', array('%name' => $name, '%module' => $module), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $user->uid .'/edit'));
}

/**
 * Web service processing
 */
function imis_auth_webservice($name = '', $pass = '') {
  $host = variable_get('imis_auth_host', '');
  $ws_filename = variable_get('imis_auth_ws_filename', '');
  $ws_method = variable_get('imis_auth_ws_method', '');
  if (!$host || !$ws_filename || !$ws_method) {
    // Module not configured, return a message.
    $msg = t('This site is not configured correctly for remote member authentication. Please contact the administrator.');
    watchdog('imis_auth', $msg, array(), WATCHDOG_ERROR);
    return array(
      'result'  => FALSE,
      'message' => $msg,
    );
  }

  // The URL to send the web service authentication requests to
  $url = $host . '/' . $ws_filename . '/' . $ws_method;

  // An array of POST variables
  $data = array(
    'Username' => $name,
    'Password' => $pass,
  );
  // Header for mime type
  $headers = array(
    'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
  );

  // Post to the host
  $result = drupal_http_request($url, $headers, 'POST', http_build_query($data, '', '&'));

  if ($result->code != 200) {
    // Request not successful
    $msg = t('Attempt to authenticate user %name at host %host failed with HTTP error code: %code.',
      array('%name' => $name, '%host' => $host, '%code' => $result->code));

    // Log the error to the watchdog
    watchdog('imis_auth', $msg, array(), WATCHDOG_ERROR);

    // Return a message
    return array(
      'result'  => FALSE,
      'message' => $msg,
      );
  }

  // Parse the XML
  $login_results  = imis_auth_parse_xml($result->data, '<LoginResults>');

  // Get the values
  $code             = imis_auth_parse_xml($login_results, '<ResultCode>');
  $msg              = imis_auth_parse_xml($login_results, '<ResultMessage>');
  $id               = imis_auth_parse_xml($login_results, '<ID>');
  $is_member        = imis_auth_parse_xml($login_results, '<IsMember>');
  $customer_type    = imis_auth_parse_xml($login_results, '<CustomerTypeCode>');
  $contact_status   = imis_auth_parse_xml($login_results, '<ContactStatusCode>');
  $billing_category = imis_auth_parse_xml($login_results, '<BillingCategory>');


  if (!is_numeric($id)) {
    // No numeric ID returned, so return an error
    return array(
      'result'  => FALSE,
      'message' => $msg,
      );
  }

  return array(
    // We are successful, return the ID and the message
    'result'           => TRUE,
    'id'               => $id,
    'message'          => $msg,
    'is_member'        => $is_member,
    'customer_type'    => $customer_type,
    'contact_status'   => $contact_status,
    'billing_category' => $billing_category,
    );
}

/**
 * A simple xml parsing function.
 *
 * @param  $xml        A text string that contains the xml to be parsed.
 * @param  $open_tag   The opening xml tag to search for.
 * @return string      The string between $open_tag and its close tag.
 */
function imis_auth_parse_xml($xml, $open_tag) {
  // Create an alternate empty tag, for example, instead of <blah>value</blah>
  // it is in the form of <blah />
  $empty_tag = substr($open_tag, 0, strpos($open_tag, '>'));
  $empty_tag .= ' />';
  if (strstr($xml, $empty_tag)) {
    return '';
  }

  // Check for normal <blah>value</blah> tags
  $close_tag = '</'. substr($open_tag, 1, strlen($open_tag));
  $pos1 = strpos($xml, $open_tag);
  $pos2 = strpos($xml, $close_tag);
  return trim(substr($xml, $pos1 + strlen($open_tag), $pos2 - ($pos1 + strlen($open_tag))));
}

/**
 * Implementation of hook_user().
 */
function imis_auth_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {imis_members} WHERE uid = %d", $account->uid);
      break;
  }
}

/**
 * Implementation of hook_perm
 */
function imis_auth_perm() {
  return array('administer iMIS authentication settings');
}

/**
 * Implementation of hook menu alter
 *
 * Disable 'request new password' local menu
 */
function imis_auth_menu_alter(&$items) {
  $disable_links = variable_get('imis_auth_disable_forgot_password',0);
  if ($disable_links) {
    $items['user/password']['access callback'] = FALSE;
  }
}
