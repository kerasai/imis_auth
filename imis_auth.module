<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function imis_auth_menu() {
  $items = array();

  $items['admin/settings/imis_auth'] = array(
    'title'             => 'iMIS Member authentication',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imis_auth_settings'),
    'access arguments' => array('administer site configuration'),
    'description'       => 'Let users login to the site and access content using their web login and password.',
  );

  return $items;
}

function imis_auth_vars() {
  return array(
    'is_member'        => '<IsMember>',
    'customer_type'    => '<CustomerTypeCode>',
    'contact_status'   => '<ContactStatusCode>',
    'billing_category' => '<BillingCategory>',
  );
}

/**
 * Settings for the module
 *
 * @ingroup form
 */
function imis_auth_settings() {
  $form['settings'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Settings'),
    '#description'   => t('iMIS member site host name to authenticate against. You have to include the <em>http://</em> prefix, but not end it with a / character.'),
  );

  $form['settings']['imis_auth_host'] =  array(
    '#type'          => 'textfield',
    '#title'         => t('Host'),
    '#default_value' => variable_get('imis_auth_host', ''),
    '#description'   => t('The host name to authenticate against.'),
  );

  $form['settings']['imis_auth_ws_filename'] =  array(
    '#type'          => 'textfield',
    '#title'         => t('Webservice filename'),
    '#default_value' => variable_get('imis_auth_ws_filename', ''),
    '#description'   => t('The webservice filename to authenticate against.'),
  );

  $form['settings']['imis_auth_ws_method'] =  array(
    '#type'          => 'textfield',
    '#title'         => t('Webservice method'),
    '#default_value' => variable_get('imis_auth_ws_method', ''),
    '#description'   => t('The webservice method to authenticate against.'),
  );

  $form['settings']['vars'] = array(
    '#type'          => 'fieldset',
    '#collapible'    => TRUE,
    '#collapsed'     => TRUE,
    '#title'         => t('Variables'),
    '#description'   => t('Variables values to validate.'),
  );

  foreach (imis_auth_vars() as $key => $var) {
    $form['settings']['vars']['imis_auth_var_' . $key] =  array(
      '#type'          => 'checkbox',
      '#title'         => t('Check @var', array('@var' => $var)),
      '#default_value' => variable_get('imis_auth_var_' . $key, 0),
    );

    $form['settings']['vars']['imis_auth_val_' . $key] =  array(
      '#type'          => 'textarea',
      '#title'         => t('Valid values'),
      '#default_value' => variable_get('imis_auth_val_' . $key, ''),
    );
  }

  $form['settings']['imis_auth_message'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Login notice'),
    '#default_value' => variable_get('imis_auth_message', ''),
    '#description'   => t('You can include a note that will apear below the login form and the login block to notify users that they can authenticate using iMIS credentials.'),
  );

  $form['settings']['imis_auth_exempt'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Exempt users'),
    '#default_value' => variable_get('imis_auth_exempt', ''),
    '#description'   => t('List of Drupal User IDs on this site to exempt from iMIS authentication. Enter one uid per line. These users will login using their Drupal credentials, and can have roles in addition to "authenticated user".'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 *
 * Change the normal form login form behavior.
 *
 * @ingroup form
 */
function imis_auth_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
      // Login form extra info
      $msg = variable_get('imis_auth_message', '');
      if ($msg) {
        $form['member-auth'] = array(
          '#value'  => $msg,
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#weight' => -10,
        );
      }

      // Reset the validate and submit functions
      $form['#validate'][] = 'imis_auth_login_validate';
      break;

    case 'user_login_block':
      // Reset the validate and submit functions
      $form['#validate'][] = 'imis_auth_login_validate';
      break;

  }
}

/**
 * List of values from a textarea
 */
function imis_auth_textarea_to_array($var_name) {
  $list = array();

  // Get the list of values from textarea
  $list = explode("\n", variable_get($var_name, ''));

  // remove new lines and other stuff from the values
  $sanitized_list = array();

  foreach ($list as $key => $value) {
    $sanitized_list[$key] = trim($value);
  }
  // Return list
  return $sanitized_list;
}

/**
 * Validate the user based on another Drupal site
 *
 * @ingroup $form
 */
function imis_auth_login_validate($form, &$form_state) {
  // Get the name and password fields from the form
  $name = $form_state['values']['name'];
  // The password as entered by the user
  $pass = $form_state['values']['pass'];

  // Check if the account already exists or its a new user
  $account = user_load(array('name' => $name));
  if (isset($account->uid)) {
    // Find out if the user is in the list of exempt users
    $list = imis_auth_textarea_to_array('imis_auth_exempt');
    if (!in_array(1, $list)) {
      // Check if uid 1 is in the list
      $list[] = 1;
    }
    foreach ($list as $key => $uid) {
      if ($uid == $account->uid) {
        // This is the site admin, don't use external authentication, but normal authentication
        user_authenticate(array('name' => $name, 'pass' => $pass));
        return;
      }
    }
  }

  // Check if the user is in the member database
  $ret = imis_auth_webservice($name, $pass);
  if (!$ret['result']) {
    // User does not have a valid name/pass in the imis_members table
    form_set_error('name', $ret['message']);
    return;
  }
  else {
    // Check the additional fields
    foreach (imis_auth_vars() as $key => $var) {
      $check = variable_get('imis_auth_var_' . $key, 0);
      if ($check) {
        $list = imis_auth_textarea_to_array('imis_auth_val_' . $key);
        if (!imis_auth_check_values($ret[$key], $list)) {
          $err_msg  = 'Your login has been accepted but our records show that your membership is not up to date. ';
          $err_msg .= 'Please contact us for assistance.';
          form_set_error('name', $err_msg);
          return;
        }
      }
    }

    // Remote login is valid
    $uid = db_result(db_query("SELECT uid FROM {imis_members} WHERE member_id = %d", $ret['id']));
    if ($uid != 0 && $uid == $account->uid) {
      // User already exists in Drupal, so we make them logged in
      global $user;
      $user = $account;
      return;
    }
    else {
      // User is in the table, save a Drupal user out of it.
      // We do not call user_external_login_register() because it assumes the "regular" way of Drupal
      // user registration, i.e. generate a random password, ...etc. We don't want that workflow.
      imis_auth_user_save($name, $pass, $ret['id']);
    }
  }
}

function imis_auth_check_values($key, $values = array()) {
  foreach ($values as $k => $value) {
    if ($key == $value) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Save the user data to the Drupal user's table
 */
function imis_auth_user_save($name, $pass, $member_id) {
  global $user;

  // Create a user array from the data
  $module = 'imis_auth';
  $userinfo = array(
    'name'             => $name,
    'pass'             => md5($pass),
    'init'             => $name,
    'status'           => 1,
    'access'           => time(),
    "authname_$module" => $name,
  );
  // Save it to the user table
  $account = user_save('', $userinfo);

  // Save the info from
  db_query("DELETE FROM {imis_members} WHERE member_id = %d", $member_id);
  db_query("INSERT INTO {imis_members} (member_id, uid) VALUES (%d, %d)", $member_id, $account->uid);

  // Set the global variable
  $user = $account;

  // Log this information
  watchdog('user', 'New member: %name via %module.', array('%name' => $name, '%module' => $module), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $user->uid .'/edit'));
}

/**
 * Web service processing
 */
function imis_auth_webservice($name = '', $pass = '') {
  $host = variable_get('imis_auth_host', '');
  $ws_filename = variable_get('imis_auth_ws_filename', '');
  $ws_method = variable_get('imis_auth_ws_method', '');
  if (!$host || !$ws_filename || !$ws_method) {
    // Module not configured, return a message.
    $msg = t('This site is not configured correctly for remote member authentication. Please contact the administrator.');
    watchdog('imis_auth', $msg, array(), WATCHDOG_ERROR);
    return array(
      'result'  => FALSE,
      'message' => $msg,
    );
  }

  // The URL to send the web service authentication requests to
  $url = $host . '/' . $ws_filename . '/' . $ws_method;

  // An array of POST variables
  $data = array(
    'Username' => $name,
    'Password' => $pass,
  );
  // Header for mime type
  $headers = array(
    'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
  );

  // Post to the host
  $result = drupal_http_request($url, $headers, 'POST', http_build_query($data, '', '&'));

//  print_r($data);
//  die();

  if ($result->code != 200) {
    // Request not successful
    $msg = t('Attempt to authenticate user %name at host %host failed with HTTP error code: %code.',
      array('%name' => $name, '%host' => $host, '%code' => $result->code));

    // Log the error to the watchdog
    watchdog('imis_auth', $msg, array(), WATCHDOG_ERROR);

    // Return a message
    return array(
      'result'  => FALSE,
      'message' => $msg,
      );
  }

  // Parse the XML
  $login_results  = imis_auth_parse_xml($result->data, '<LoginResults>');

  // Get the values
  $code             = imis_auth_parse_xml($login_results, '<ResultCode>');
  $msg              = imis_auth_parse_xml($login_results, '<ResultMessage>');
  $id               = imis_auth_parse_xml($login_results, '<ID>');
  $is_member        = imis_auth_parse_xml($login_results, '<IsMember>');
  $customer_type    = imis_auth_parse_xml($login_results, '<CustomerTypeCode>');
  $contact_status   = imis_auth_parse_xml($login_results, '<ContactStatusCode>');
  $billing_category = imis_auth_parse_xml($login_results, '<BillingCategory>');


  if (!is_numeric($id)) {
    // No numeric ID returned, so return an error
    return array(
      'result'  => FALSE,
      'message' => $msg,
      );
  }

  return array(
    // We are successful, return the ID and the message
    'result'           => TRUE,
    'id'               => $id,
    'message'          => $msg,
    'is_member'        => $is_member,
    'customer_type'    => $customer_type,
    'contact_status'   => $contact_status,
    'billing_category' => $billing_category,
    );
}

/**
 * A simple xml parsing function.
 *
 * @param  $xml        A text string that contains the xml to be parsed.
 * @param  $open_tag   The opening xml tag to search for.
 * @return string      The string between $open_tag and its close tag.
 */
function imis_auth_parse_xml($xml, $open_tag) {
  // Create an alternate empty tag, for example, instead of <blah>value</blah>
  // it is in the form of <blah />
  $empty_tag = substr($open_tag, 0, strpos($open_tag, '>'));
  $empty_tag .= ' />';
  if (strstr($xml, $empty_tag)) {
    return '';
  }

  // Check for normal <blah>value</blah> tags
  $close_tag = '</'. substr($open_tag, 1, strlen($open_tag));
  $pos1 = strpos($xml, $open_tag);
  $pos2 = strpos($xml, $close_tag);
  return trim(substr($xml, $pos1 + strlen($open_tag), $pos2 - ($pos1 + strlen($open_tag))));
}

/**
 * Implementation of hook_user().
 */
function imis_auth_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {imis_members} WHERE uid = %d", $account->uid);
      break;
  }
}
