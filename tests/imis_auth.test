<?php
/**
 * @file
 * Tests for iMIS Authentication module.
 */

/**
 * Tests for ATS/iMIS service.
 */
class ImisAuthTestCase extends DrupalWebTestCase {
  private $name = 'Drupal';
  private $password = 'Drupal';

  private $method = 'ValidateLoginWithData';
  private $filename 'imis-auth-mock-xml';
  private $host;

  public static function getInfo() {
    return array(
      'name' => 'ATS/iMIS User login',
      'description' => 'Test login using ATS/iMIS Web Service',
      'group' => 'iMIS Auth',
    );
  }

  public function setUp() {
    parent::setUp('imis_auth', 'imis_auth_mock');

    // Set the host here to be able to grab $base_url.
    global $base_url;
    $this->host = $base_url;

    // Set the module's configurations.
    variable_set('imis_auth_host', $this->host);
    variable_set('imis_auth_ws_filename', $this->filename);
    variable_set('imis_auth_ws_method', $this->method);
  }

  /**
   * Basic login features.
   */
  public function testImisAuthLogin() {
    $account = new stdClass();
    $account->name = $this->name;
    $account->pass_raw = $this->password;
    $this->drupalLogin($account);
    $this->drupalLogout();

    // Try logging in again.
    $this->drupalLogin($account);
    // A returning user gets a welcome message.
    $this->assertRaw(t('Welcome %username', array('%username' => $this->name)), 'Re-logging in with existing account successful.');
    $this->drupalLogout();

    // Attempt logging in with invalid data.
    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw . 'incorrect',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Unable to login as user !username. The User ID or Password is invalid.', array('!username' => $this->name)), 'Service returned a message specifying an account cannot be logged in.');

    // Attempt to login an exempted user.
    $exempted_user = $this->drupalCreateUser();
    // Set config for exempted users list.
    variable_set('imis_auth_exempt', $exempted_user->uid);
    $this->drupalLogin($exempted_user);
    $this->drupalLogout();

    // Check each auth vars upon logging in.
    $data = imis_auth_mock_retrieve_data();
    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw,
    );
    foreach (imis_auth_vars() as $k => $v) {
      // Emulate checking the checkbox for variable.
      variable_set('imis_auth_var_' . $k, 1);
      // Emulate entering data on the textarea for variable but with different 
      // value.
      variable_set('imis_auth_val_' . $k, $data[$k] . 'incorrect');

      // Attempt logging in the user with outdated data.
      $this->drupalPost('user', $edit, t('Log in'));
      $this->assertText('Your login has been accepted but our records show that your membership is not up to date.', format_string("User is not able to login due to outdated data for @value.", array('@value' => $v)));
    }
  }

  /**
   * Simple test to check validation for imis_auth settings.
   */
  public function testImisAuthConfig() {
    $administer_imis_auth_settings_user = $this->drupalCreateUser(array(
      'access administration pages',
      'administer iMIS authentication settings')
    );
    // Need to add the user to the exempted list to be able to login.
    variable_set('imis_auth_exempt', $administer_imis_auth_settings_user->uid);
    $this->drupalLogin($administer_imis_auth_settings_user);

    $host = $this->host;
    $url = str_replace('http://', '', $host);
    $edit = array(
      'imis_auth_host' => $url,
    );
    $this->drupalPost('admin/people/imis_auth', $edit, t('Save configuration'));
    $this->assertText(t('Missing url scheme.'), 'Configuration is not saved due to missing url scheme in host.');

    $url = str_replace('http', 'ftp', $host);
    $edit['imis_auth_host'] = $url;
    $this->drupalPost('admin/people/imis_auth', $edit, t('Save configuration'));
    $this->assertText(t('Invalid url scheme.'), 'Configuration is not saved due to an invalid url scheme in host.');
  }
}
